{
	"info": {
		"_postman_id": "b8707320-a83c-4814-8d7a-5319c9098614",
		"name": "portfolio-dempsjam",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26928887"
	},
	"item": [
		{
			"name": "Login User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.environment.set(\"user1_token\", pm.response.json()[\"id_token\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"grant_type\": \"password\",\n    \"username\": \"{{user1_email}}\",\n    \"password\": \"{{user1_password}}\",\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/login",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Decode User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.environment.set(\"user1_sub\", pm.response.json()[\"sub\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/decode",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"decode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.environment.set(\"user2_token\", pm.response.json()[\"id_token\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"grant_type\": \"password\",\n    \"username\": \"{{user2_email}}\",\n    \"password\": \"{{user2_password}}\",\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/login",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Decode User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.environment.set(\"user2_sub\", pm.response.json()[\"sub\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/decode",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"decode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Library User 1 Public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"    user1_sub = pm.environment.get(\"user1_sub\");",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"library1\");",
							"   pm.expect(pm.response.json()[\"categories\"]).to.eq(\"tests\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"test library 1\");",
							"   pm.expect(pm.response.json()[\"public\"]).to.eq(true);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(user1_sub);",
							"});",
							"",
							"pm.environment.set(\"user1_lib_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"library1\",\n    \"description\": \"test library 1\",\n    \"categories\": \"tests\",\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Library User 1 Private",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"    user1_sub = pm.environment.get(\"user1_sub\");",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"library2\");",
							"   pm.expect(pm.response.json()[\"categories\"]).to.eq(\"tests\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"test library 2\");",
							"   pm.expect(pm.response.json()[\"public\"]).to.eq(false);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(user1_sub);",
							"});",
							"",
							"pm.environment.set(\"priv_user1_lib_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "content-type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"library2\",\n    \"description\": \"test library 2\",\n    \"categories\": \"tests\",\n    \"public\": false\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Library User 2 Public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"    user2_sub = pm.environment.get(\"user2_sub\");",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"library1\");",
							"   pm.expect(pm.response.json()[\"categories\"]).to.eq(\"tests\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"test library 1\");",
							"   pm.expect(pm.response.json()[\"public\"]).to.eq(true);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(user2_sub);",
							"});",
							"",
							"pm.environment.set(\"user2_lib_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"library1\",\n    \"description\": \"test library 1\",\n    \"categories\": \"tests\",\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Library 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"library1\",\n    \"description\": \"test library 1\",\n    \"categories\": \"tests\",\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Public Libraries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/libraries",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Public Library Single",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All User 1 Libraries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/libraries",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries"
					]
				}
			},
			"response": []
		},
		{
			"name": "User 1 NO JSON Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"accept-encoding": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/html",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/libraries",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Library User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"    user1_sub = pm.environment.get(\"user1_sub\");",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"library1\");",
							"   pm.expect(pm.response.json()[\"categories\"]).to.eq(\"tests\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"updated test library 1\");",
							"   pm.expect(pm.response.json()[\"public\"]).to.eq(true);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(user1_sub);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"library1\",\n    \"description\": \"updated test library 1\",\n    \"categories\": \"tests\",\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT LIBRARY WRONG USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"library1\",\n    \"description\": \"updated test library 1\",\n    \"categories\": \"tests\",\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Library 406 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"library1\",\n    \"description\": \"updated test library 1\",\n    \"categories\": \"tests\",\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Library 403 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"library1\",\n    \"description\": \"updated test library 1\",\n    \"categories\": \"tests\",\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Library 400 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"library1\",\n    \"description\": \"updated test library 1\",\n    \"categories\": \"tests\",\n    \"public\": true,\n    \"random\": \"not supposed to be here\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Library 404 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(404);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"library1\",\n    \"description\": \"updated test library 1\",\n    \"categories\": \"tests\",\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Update Library User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"    user1_sub = pm.environment.get(\"user1_sub\");",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"libraryup\");",
							"   pm.expect(pm.response.json()[\"categories\"]).to.eq(\"tests\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"updated test library 1\");",
							"   pm.expect(pm.response.json()[\"public\"]).to.eq(true);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(user1_sub);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"libraryup\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH LIBRARY WRONG USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"libraryup\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Update Library 404 test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(404);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"libraryup\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Update Library 406 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"libraryup\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Update Library 403 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"libraryup\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Update Library 400 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"magic\": \"libraryup\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Book User 1 Public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"    user1_sub = pm.environment.get(\"user1_sub\");",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"The Best Book\");",
							"   pm.expect(pm.response.json()[\"author\"]).to.eq(\"The Worst\");",
							"   pm.expect(pm.response.json()[\"isbn\"]).to.eq(1231254152);",
							"   pm.expect(pm.response.json()[\"public\"]).to.eq(true);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(user1_sub);",
							"});",
							"",
							"pm.environment.set(\"user1_book_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Book User 2 Public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"    user2_sub = pm.environment.get(\"user2_sub\");",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"The Best Book\");",
							"   pm.expect(pm.response.json()[\"author\"]).to.eq(\"The Worst\");",
							"   pm.expect(pm.response.json()[\"isbn\"]).to.eq(1231254152);",
							"   pm.expect(pm.response.json()[\"public\"]).to.eq(true);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(user2_sub);",
							"});",
							"",
							"pm.environment.set(\"user2_book_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Book 406 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Book 403 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Book 400 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book\",\n    \"author\": \"The Worst\",\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Book User 1 Private",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"    user1_sub = pm.environment.get(\"user1_sub\");",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"The Test Book\");",
							"   pm.expect(pm.response.json()[\"author\"]).to.eq(\"The Worst\");",
							"   pm.expect(pm.response.json()[\"isbn\"]).to.eq(1231254152);",
							"   pm.expect(pm.response.json()[\"public\"]).to.eq(false);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(user1_sub);",
							"});",
							"",
							"pm.environment.set(\"priv_user1_book_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Test Book\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": false\n}"
				},
				"url": {
					"raw": "{{app_url}}/books",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All User 1 Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/books",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All 406 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/books",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Public Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/books",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Book User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"    user1_sub = pm.environment.get(\"user1_sub\");",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"The Best Book Updated\");",
							"   pm.expect(pm.response.json()[\"author\"]).to.eq(\"The Worst\");",
							"   pm.expect(pm.response.json()[\"isbn\"]).to.eq(1231254152);",
							"   pm.expect(pm.response.json()[\"public\"]).to.eq(true);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(user1_sub);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book Updated\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT BOOK WRONG USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book Updated\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Book 406 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "html/text",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book Updated\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Book 403 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book Updated\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Book 400 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book Updated\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Book 404 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book Updated\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Update Book User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"    user1_sub = pm.environment.get(\"user1_sub\");",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"The Best Book Updated 2\");",
							"   pm.expect(pm.response.json()[\"author\"]).to.eq(\"The Worst\");",
							"   pm.expect(pm.response.json()[\"isbn\"]).to.eq(1231254152);",
							"   pm.expect(pm.response.json()[\"public\"]).to.eq(true);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(user1_sub);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book Updated 2\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH BOOK WRONG USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book Updated 2\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Update Book 406 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "html/text",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book Updated\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Update Book 403 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book Updated\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Update Book 400 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"magic\": 1231254152\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Update Book 404 Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Best Book Updated\",\n    \"author\": \"The Worst\",\n    \"isbn\": 1231254152,\n    \"public\": true\n}"
				},
				"url": {
					"raw": "{{app_url}}/books/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Book (Req Login/Auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Book to Library",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Book WRONG USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Visual Books Update Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/books",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Visual Library Update Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/libraries",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book from Library",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book WRONG USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Visual Book Delete Relationship",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/books",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Visual Library Delete Relationship",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/libraries",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete BOOK WRONG USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User1 Book Public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/books/{{user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User2 Book Public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/books/{{user2_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{user2_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User1 Book Priv",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/books/{{priv_user1_book_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"books",
						"{{priv_user1_book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete LIBRARY WRONG USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User1 Library Public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/libraries/{{user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user1_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User2 Library Public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user2_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/libraries/{{user2_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{user2_lib_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User1 Library Private",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/libraries/{{priv_user1_lib_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"libraries",
						"{{priv_user1_lib_id}}"
					]
				}
			},
			"response": []
		}
	]
}